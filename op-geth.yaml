package:
  name: op-geth
  version: 1.101411.6
  epoch: 0
  description: The go-ethereum command line interface
  copyright:
    - license: LGPL-3.0-or-later
    - license: GPL-3.0-or-later
  dependencies:
    runtime:
      - busybox

environment:
  contents:
    packages:
      - ca-certificates
      - gcc
      - git
      - linux-headers
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 50b3422b9ac682a8fa503c4f409339a9bff69717
      repository: https://github.com/ethereum-optimism/op-geth
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: |-
        github.com/golang-jwt/jwt/v4@v4.5.1
        golang.org/x/crypto@v0.31.0
        golang.org/x/net@v0.33.0
        github.com/hashicorp/go-retryablehttp@v0.7.7

  - uses: go/build
    with:
      packages: ./cmd/geth
      # TODO: The following ldflags set the gitTag for the main package and all subpackages.
      # verify if params.gitTag is needed or can be removed in future builds and change ldflags to new path when the next stable version is released and if auto-bump fails
      ldflags: |
        -X github.com/ethereum/go-ethereum/version.gitTag=v${{package.version}}
        -X github.com/ethereum/go-ethereum/params.gitTag=v${{package.version}}
      output: geth

subpackages:
  - name: ${{package.name}}-compat
    description: "Compatibility package to place binaries in the location expected by upstream"
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/bin
          ln -sf /usr/bin/geth ${{targets.subpkgdir}}/bin/geth

  - name: ${{package.name}}-clef
    pipeline:
      - uses: go/build
        with:
          packages: ./cmd/clef
          ldflags: |
            -X github.com/ethereum/go-ethereum/version.gitTag=v${{package.version}}
            -X github.com/ethereum/go-ethereum/params.gitTag=v${{package.version}}
          output: clef
    test:
      pipeline:
        - runs: |
            clef --version
            clef --help
      # Cannot create a functional test because clef requires an interactive shell and dynamic input
        # - runs: |
        #     cat <<EOF > .clef_init.exp
        #     #!/usr/bin/expect -f
        #     spawn ./build/bin/clef init
        #     expect "Enter 'ok' to proceed:"
        #     send "ok\r"
        #     expect "Password:"
        #     send "1234567890\r"
        #     expect "Repeat password:"
        #     send "1234567890\r"
        #     expect eof
        #     EOF
          
        #     chmod +x .clef_init.exp
        #     ./clef_init.exp

        #     test -f /root/.clef/masterseed.json && echo "Clef init successful" || { echo "Clef init failed"; exit 1; }

  - name: ${{package.name}}-abigen
    pipeline:
      - uses: go/build
        with:
          packages: ./cmd/abigen
          output: abigen
          ldflags: |
            -X github.com/ethereum/go-ethereum/version.gitTag=v${{package.version}}
            -X github.com/ethereum/go-ethereum/params.gitTag=v${{package.version}}
    test:
      pipeline:
        - runs: |
            abigen --version
            abigen --help
            echo 'Testing abigen with a sample ABI...'

            echo '[{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]' > test.abi

            abigen --abi test.abi --pkg main --type TestContract --out test.go

            if [ ! -s test.go ]; then
              echo "Error: test.go was not generated correctly!"
              exit 1
            fi

            echo "abigen test passed successfully!"

  - name: ${{package.name}}-devp2p
    pipeline:
      - uses: go/build
        with:
          packages: ./cmd/devp2p
          ldflags: |
            -X github.com/ethereum/go-ethereum/version.gitTag=v${{package.version}}
            -X github.com/ethereum/go-ethereum/params.gitTag=v${{package.version}}
          output: devp2p
    test:
      pipeline:
        - runs: |
            devp2p --version
            devp2p --help
        - runs: |
            devp2p key generate mynode.key

            # Verify that the key was created and contains a valid hex string
            if [ ! -f "mynode.key" ]; then
              echo "Error: mynode.key was not created!" >&2
              exit 1
            fi

            KEY_CONTENT=$(cat mynode.key)
            if ! echo "$KEY_CONTENT" | grep -qE '^[a-f0-9]{64}$'; then
              echo "Error: Invalid key format in mynode.key" >&2
              exit 1
            fi

            echo "Successfully generated and validated mynode.key"

  - name: ${{package.name}}-evm
    pipeline:
      - uses: go/build
        with:
          packages: ./cmd/evm
          ldflags: |
            -X github.com/ethereum/go-ethereum/version.gitTag=v${{package.version}}
            -X github.com/ethereum/go-ethereum/params.gitTag=v${{package.version}}
          output: evm
    test:
      pipeline:
        - runs: |
            evm --version
            evm --help

  - name: ${{package.name}}-rlpdump
    pipeline:
      - uses: go/build
        with:
          packages: ./cmd/rlpdump
          output: rlpdump
    test:
      pipeline:
        - runs: |
            rlpdump --help

test:
  pipeline:
    - name: version and help tests for geth
      runs: |
        geth version | grep -qi "${{package.version}}-stable"
        geth --help

update:
  enabled: true
  github:
    identifier: ethereum-optimism/op-geth
    strip-prefix: v
    tag-filter: v
